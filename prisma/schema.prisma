// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
 provider = "postgresql"
  url = env("POSTGRES_PRISMA_URL") // uses connection pooling
  directUrl = env("POSTGRES_URL_NON_POOLING") //
}
model users {
  id                 String      @id @default(cuid())
  cin                String?  @unique @db.VarChar(20)
  nom                String   @db.VarChar(100)
  prenom             String?  @db.VarChar(100)
  em_number          String?  @db.VarChar(15)
  email              String   @unique @db.VarChar(100)
  password           String   @db.VarChar(255)
  emailConfirmed     Boolean  @default(false)  // To track email confirmation
  confirmationToken  String?  // Field to store the confirmation token
  tokenExpiry        DateTime? // Token expiration time
  roles              Role[]   @default([USER])  // Array of roles
  resetToken         String?  // Field to store password reset token
  resetTokenExpiry   DateTime? // Expiry time for the password reset token
  plans              Plan[]  
  
}

model Plan {
  id                Int      @id @default(autoincrement())
  name              String?  // Optional name of the plan
  description       String?  // Optional description of the plan
  totalDays         Int      // Total number of days in the plan
  itineraries       String[] // Array of MongoDB Itinerary IDs
  imageUrls         String[]  // Array of image URLs
  selectedCountries String[]  // Array of selected countries
  totalPrice        Float?    // Total price of the plan
  totalCost         Float?
  sell              Boolean  @default(false) // Whether the plan is for sale
  
    // Foreign key to reference the user
  userId            String      
  user              users    @relation(fields: [userId], references: [id]) // Corrected relation field

}


enum Role {
  USER
  SELLER
  ADMIN
}
